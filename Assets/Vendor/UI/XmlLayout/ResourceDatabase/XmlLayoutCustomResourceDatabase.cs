using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace UI.Xml
{
    [CreateAssetMenu(fileName = "MyCustomResourceDatabase", menuName = "XmlLayout/Resources/Custom Resource Database")]
    public class XmlLayoutCustomResourceDatabase : ScriptableObject
    {
        /// <summary>
        /// This value will be pre-pended to all asset paths in this database. If 'Monitor Containing Folder' and 'Automatically Remove Entries' are set, then modifying this value will automatically update all entry paths to match.
        /// </summary>
        [Tooltip("This value will be pre-pended to all asset paths in this database. If 'Monitor Containing Folder' and 'Automatically Remove Entries' are set, then modifying this value will automatically update all entry paths to match.")]
        public string PathPrefix = string.Empty;

        /// <summary>
        /// If this is set to true, then this resource database will automatically monitor its containing folder for any assets and maintain the folders/entries collections on its own.
        /// If this is set to false, then you will need to manually add folders and/or entries to this database.
        /// </summary>
        public bool MonitorContainingFolder = false;

        /// <summary>
        /// This is a list of folders for this resource database to monitor. If 'MonitorContainingFolder' is set to true, then this will always have the folder containing this asset, and nothing else.
        /// If 'MonitorContainingFolder' is set to false, then this can be populated manually with any folder paths you wish.
        /// </summary>
        public List<string> folders = new List<string>();

        /// <summary>
        /// If this is set to true, then this resource database will automatically remove any entries that haven't been generated by finding them in the folders collection
        /// </summary>
        public bool AutomaticallyRemoveEntries = false;

        /// <summary>
        /// A list of resource entries in this database, consisting of paths and Unity assets.
        /// </summary>
        public List<XmlLayoutResourceEntry> entries = new List<XmlLayoutResourceEntry>();

        /// <summary>
        /// Add an entry to this resource database. Can be used at any time, but if you wish to reference the new entry, any XmlLayout instances that need to reference it will need to be rebuilt after adding the new entry.
        /// </summary>
        /// <param name="path"></param>
        /// <param name="resource"></param>
        public virtual void AddEntry(string path, UnityEngine.Object resource)
        {
            entries.Add(new XmlLayoutResourceEntry { path = path, resource = resource });
        }

#if UNITY_EDITOR
        /// <summary>
        /// Load resource entries. Only executed in the editor; at run-time the collection has already been generated.
        /// (You can still manipulate the collection at run-time if you wish)
        /// </summary>
        public virtual void LoadFolders()
        {
            var pathsUsed = new List<string>();

            if (MonitorContainingFolder)
            {
                var containingFolder = UnityEditor.AssetDatabase.GetAssetPath(this).Replace(String.Format("/{0}.asset", this.name), String.Empty);
                containingFolder = containingFolder.Substring(7);

                folders = new List<string>()
                {
                    containingFolder
                };
            }

            if (folders.Any())
            {
                var filteredFolders = folders.Where(f => System.IO.Directory.Exists(Application.dataPath + "/" + f))
                                             .Where(f => !String.IsNullOrEmpty(f))
                                             .Select(f => "Assets/" + f)
                                             .ToArray();

                var assetGUIDS = UnityEditor.AssetDatabase.FindAssets("", filteredFolders);
                var assetPaths = assetGUIDS.Select(g => UnityEditor.AssetDatabase.GUIDToAssetPath(g))
                                           .Where(g => !g.EndsWith(".cs")) // exclude script files (I don't see any reason to keep them at this point)
                                           .Where(g => g.Contains(".")) // skip folders
                                           .Distinct()
                                           .ToList();

                foreach (var folder in filteredFolders)
                {
                    var assetPathsInFolder = assetPaths.Where(ap => ap.StartsWith(folder));

                    foreach (var assetPath in assetPathsInFolder)
                    {
                        var filteredAssetPath = assetPath.Replace(folder, String.Empty);
                        filteredAssetPath = filteredAssetPath.Substring(0, filteredAssetPath.LastIndexOf('.'));

                        if (filteredAssetPath.StartsWith("/"))
                        {
                            filteredAssetPath = filteredAssetPath.Substring(1);
                        }

                        filteredAssetPath = this.PathPrefix + filteredAssetPath;

                        var asset = UnityEditor.AssetDatabase.LoadAssetAtPath<UnityEngine.Object>(assetPath);

                        entries.RemoveAll(e => e.path == filteredAssetPath);
                        AddEntry(filteredAssetPath, asset);

                        // special handling for atlases
                        if (asset.GetType() == typeof(Texture2D))
                        {
                            var atlas = UnityEditor.AssetDatabase.LoadAllAssetsAtPath(assetPath).ToList();

                            if (atlas.Count > 2)
                            {
                                foreach (var item in atlas)
                                {
                                    var itemPath = filteredAssetPath + ":" + item.name;

                                    if (!entries.Any(e => e.path == itemPath && e.resource != null))
                                    {
                                        AddEntry(itemPath, item);
                                    }

                                    pathsUsed.Add(itemPath);
                                }
                            }
                        }

                        pathsUsed.Add(filteredAssetPath);
                    }
                }
            }

            if (AutomaticallyRemoveEntries)
            {
                entries.RemoveAll(e => !pathsUsed.Contains(e.path));
            }

            FixSprites();
        }

        /// <summary>
        /// Sometimes Sprites return 'Texture2D' as their type when loaded via AssetDatabase.LoadAssetAtPath()
        /// This method will locate any of these and reload them as Sprites instead
        /// </summary>
        private void FixSprites()
        {
            for (int x = 0; x < entries.Count; x++)
            {
                if (entries[x].resource is Texture2D)
                {
                    var sprite = UnityEditor.AssetDatabase.LoadAssetAtPath<Sprite>(UnityEditor.AssetDatabase.GetAssetPath(entries[x].resource));
                    if (sprite != null) entries[x].resource = sprite;
                }
            }
        }
#endif
    }
}
